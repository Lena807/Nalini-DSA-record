#include <stdio.h>
#include <stdlib.h>

#define MAX 100

// Stack structure
typedef struct {
    int items[MAX];
    int top;
} Stack;

void initializeStack(Stack *s) {
    s->top = -1;
}

int isEmpty(Stack *s) {
    return s->top == -1;
}

void push(Stack *s, int value) {
    if (s->top == MAX - 1) {
        printf("Stack overflow\n");
    } else {
        s->items[++s->top] = value;
    }
}

int pop(Stack *s) {
    if (isEmpty(s)) {
        printf("Stack underflow\n");
        return -1;
    } else {
        return s->items[s->top--];
    }
}

void DFS(int graph[MAX][MAX], int start, int n) {
    Stack s;
    initializeStack(&s);

    int visited[MAX] = {0};
    push(&s, start);

    while (!isEmpty(&s)) {
        int vertex = pop(&s);
        if (!visited[vertex]) {
            printf("%d ", vertex);
            visited[vertex] = 1;
            // Push all unvisited adjacent vertices to the stack
            for (int i = n - 1; i >= 0; i--) {
                if (graph[vertex][i] == 1 && !visited[i]) {
                    push(&s, i);
                }
            }
        }
    }
}

int main() {
    int n = 6;
    int graph[MAX][MAX] = {
        {0, 1, 1, 0, 0, 0},
        {0, 0, 0, 1, 1, 0},
        {0, 0, 0, 0, 0, 1},
        {0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 1},
        {0, 0, 0, 0, 0, 0}
    };

    printf("Depth-First Search starting from vertex 0:\n");
    DFS(graph, 0, n);

    return 0;
}
